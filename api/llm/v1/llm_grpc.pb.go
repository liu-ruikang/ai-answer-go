// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: llm/v1/llm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLM_ChatDeepseekR1_FullMethodName       = "/api.llm.v1.LLM/ChatDeepseekR1"
	LLM_StreamChatDeepseekR1_FullMethodName = "/api.llm.v1.LLM/StreamChatDeepseekR1"
)

// LLMClient is the client API for LLM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LLM服务定义
type LLMClient interface {
	// 调用Deepseek R1模型
	ChatDeepseekR1(ctx context.Context, in *ChatDeepseekR1Request, opts ...grpc.CallOption) (*ChatDeepseekR1Response, error)
	// 流式调用Deepseek R1模型
	StreamChatDeepseekR1(ctx context.Context, in *ChatDeepseekR1Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatDeepseekR1Response], error)
}

type lLMClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMClient(cc grpc.ClientConnInterface) LLMClient {
	return &lLMClient{cc}
}

func (c *lLMClient) ChatDeepseekR1(ctx context.Context, in *ChatDeepseekR1Request, opts ...grpc.CallOption) (*ChatDeepseekR1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatDeepseekR1Response)
	err := c.cc.Invoke(ctx, LLM_ChatDeepseekR1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMClient) StreamChatDeepseekR1(ctx context.Context, in *ChatDeepseekR1Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatDeepseekR1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLM_ServiceDesc.Streams[0], LLM_StreamChatDeepseekR1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatDeepseekR1Request, ChatDeepseekR1Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLM_StreamChatDeepseekR1Client = grpc.ServerStreamingClient[ChatDeepseekR1Response]

// LLMServer is the server API for LLM service.
// All implementations must embed UnimplementedLLMServer
// for forward compatibility.
//
// LLM服务定义
type LLMServer interface {
	// 调用Deepseek R1模型
	ChatDeepseekR1(context.Context, *ChatDeepseekR1Request) (*ChatDeepseekR1Response, error)
	// 流式调用Deepseek R1模型
	StreamChatDeepseekR1(*ChatDeepseekR1Request, grpc.ServerStreamingServer[ChatDeepseekR1Response]) error
	mustEmbedUnimplementedLLMServer()
}

// UnimplementedLLMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMServer struct{}

func (UnimplementedLLMServer) ChatDeepseekR1(context.Context, *ChatDeepseekR1Request) (*ChatDeepseekR1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeepseekR1 not implemented")
}
func (UnimplementedLLMServer) StreamChatDeepseekR1(*ChatDeepseekR1Request, grpc.ServerStreamingServer[ChatDeepseekR1Response]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChatDeepseekR1 not implemented")
}
func (UnimplementedLLMServer) mustEmbedUnimplementedLLMServer() {}
func (UnimplementedLLMServer) testEmbeddedByValue()             {}

// UnsafeLLMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMServer will
// result in compilation errors.
type UnsafeLLMServer interface {
	mustEmbedUnimplementedLLMServer()
}

func RegisterLLMServer(s grpc.ServiceRegistrar, srv LLMServer) {
	// If the following call pancis, it indicates UnimplementedLLMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLM_ServiceDesc, srv)
}

func _LLM_ChatDeepseekR1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatDeepseekR1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServer).ChatDeepseekR1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLM_ChatDeepseekR1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServer).ChatDeepseekR1(ctx, req.(*ChatDeepseekR1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLM_StreamChatDeepseekR1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatDeepseekR1Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMServer).StreamChatDeepseekR1(m, &grpc.GenericServerStream[ChatDeepseekR1Request, ChatDeepseekR1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLM_StreamChatDeepseekR1Server = grpc.ServerStreamingServer[ChatDeepseekR1Response]

// LLM_ServiceDesc is the grpc.ServiceDesc for LLM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.llm.v1.LLM",
	HandlerType: (*LLMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatDeepseekR1",
			Handler:    _LLM_ChatDeepseekR1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChatDeepseekR1",
			Handler:       _LLM_StreamChatDeepseekR1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llm/v1/llm.proto",
}
